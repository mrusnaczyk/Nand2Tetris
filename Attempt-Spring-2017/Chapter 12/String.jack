// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
* Represents character strings. In addition for constructing and disposing
* strings, the class features methods for getting and setting individual
* characters of the string, for erasing the string's last character,
* for appending a character to the string's end, and more typical
* string-oriented operations.
*/
class String {
	field int len;
	field int maxLen;
	field Array chars;

	/** Constructs a new empty String with a maximum length of maxLength. */
	constructor String new(int maxLength) {

		if(maxLength = 0){
			let maxLength = 1;   
		}

		let len = 0;
		let maxLen = maxLength;
		let chars = Array.new(maxLength);

		return this;
	}

	/** De-allocates the string and frees its space. */
	method void dispose() {
		do chars.dispose();
		return;
	}

	/** Returns the current length of this String. */
	method int length() {
		return len;
	}

	/** Returns the character at location j. */
	method char charAt(int j) {
		return chars[j];
	}

	/** Sets the j'th character of this string to be c. */
	method void setCharAt(int j, char c) {
		let chars[j] = c;
		return;
	}

	/** Appends the character c to the end of this String.
	*  Returns this string as the return value. */
	method String appendChar(char c) {
		//check if len is less than maxLen
		if(len < maxLen){
			let chars[len] = c;
			let len = len + 1;
		}
		return this;
	}

	/** Erases the last character from this String. */
	method void eraseLastChar() {
		if(len > 0){
			let len = len - 1;
		}
		return;
	}

	/** Returns the integer value of this String until the first non
	*  numeric character. */
	method int intValue() {
		var int intVal,index;
		var boolean neg;

		let intVal = 0;

		//check if first char is '-'
		if((len > 0) & (chars[0] = 45)){
			let neg = true;
			let index = 1;
		}else{
			let neg = false;
			let index = 0;
		}

		while((index < len) & String.isDigit(chars[index])){
			let intVal = (intVal * 10) + String.charToDigit(chars[index]);
			let index = index + 1;
		}

		if(neg){
			return -intVal;
		}else{
			return intVal;
		}

	}

	/** 48 <= ascii(c) <= 57 is digit*/
	function boolean isDigit(char c){
		return ~(c < 48) & ~(c > 57);
	}

	/** must be called after String.isDigit */
	function int charToDigit(char c){
		return c - 48;
	}

	/** must have 0<= d <= 9*/
	function char digitToChar(int d){
		return d + 48;
	}

	/** Sets this String to hold a representation of the given number. */
	method void setInt(int number) {
		//clear string first
		let len = 0;

		if(number < 0){
			let number = -number;
			do appendChar(45);
		}

		do setIntHelper(number);

		return;
	}

	method void setIntHelper(int number){
		var int nextNum;

		if(number < 10){
			do appendChar(String.digitToChar(number));
		}else{
			let nextNum = number / 10;
			do setIntHelper(nextNum);
			do appendChar(String.digitToChar(number - (nextNum * 10)));
		}

		return;
	}

	/** Returns the new line character. */
	function char newLine() {
		return 128;
	}

	/** Returns the backspace character. */
	function char backSpace() {
		return 129;
	}

	/** Returns the double quote (") character. */
	function char doubleQuote() {
		return 34;
	}

}

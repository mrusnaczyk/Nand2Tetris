// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//Load A-Reg with instruction if bit 15 is low (Addr. instruct.) or with ALU output if high (Comp. instruct.) 
	Mux16(a=instruction,b=ALUOut,sel=instruction[15],out=APin);
	
	Not(in=instruction[15],out=notBit15); //True if A-instruction
	Or(a=notBit15,b=instruction[5],out=loadA); //Write to A Reg. if A-Instruction or if set as destination
	ARegister(in=APin,load=loadA,out[0..14]=addressM,out=ARegOut);
				
	//Choose between using the A-Reg or Mem[A]
	Mux16(a=ARegOut,b=inM,sel=instruction[12],out=AorMOut);	

	//D-Register
	And(a=instruction[4],b=instruction[15],out=WriteDReg); 	//Make sure it's a C-instruction 
	DRegister(in=ALUOut,load=WriteDReg,out=DRegOut);

	//ALU Calc
	ALU(
		x=DRegOut,y=AorMOut,
		zx=instruction[11],nx=instruction[10],
		zy=instruction[9],ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		zr=ALUZero,ng=ALUNeg,
		out=ALUOut,out=outM
	);

	//Write to Mem?
	And(a=instruction[3],b=instruction[15],out=writeM); //Make sure it's a C-instruction

	//Jumps 
	Not(in=ALUZero,out=ALUZeroNot);
	Not(in=ALUNeg,out=ALUNegNot);
	And(a=ALUZeroNot,b=ALUNegNot,out=ALUGre); //Check if ALU Out is greater

	And(a=instruction[2],b=ALUNeg,out=JumpLZ); //Jump if neg
	And(a=instruction[1],b=ALUZero,out=JumpEZ); //Jump if equal
	And(a=instruction[0],b=ALUGre,out=JumpGZ); //Jump if greater

	Or(a=JumpLZ,b=JumpEZ,out=JTemp); 
	Or(a=JTemp,b=JumpGZ,out=JTemp2);
	And(a=JTemp2,b=instruction[15],out=JumpDo); //Make sure it's a C-instruction
		
	//PC
	Not(in=JumpDo,out=IncDo); //If you aren't jumping, then you're incrementing
	PC(in=ARegOut,load=JumpDo,inc=IncDo,reset=reset,out[0..14]=pc);
}
